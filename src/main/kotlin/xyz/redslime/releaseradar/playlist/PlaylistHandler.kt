package xyz.redslime.releaseradar.playlist

import com.adamratzman.spotify.SpotifyClientApi
import com.adamratzman.spotify.SpotifyUserAuthorization
import com.adamratzman.spotify.models.Album
import com.adamratzman.spotify.models.Playlist
import com.adamratzman.spotify.models.toPlayableUri
import com.adamratzman.spotify.refreshSpotifyClientToken
import com.adamratzman.spotify.spotifyClientApi
import com.adamratzman.spotify.utils.Market
import dev.kord.core.entity.User
import xyz.redslime.releaseradar.asLong
import xyz.redslime.releaseradar.config
import xyz.redslime.releaseradar.db

/**
 * @author redslime
 * @version 2023-06-16
 */
class PlaylistHandler(val duration: PlaylistDuration, val public: Boolean, val append: Boolean) {

    suspend fun postAlbums(user: User, albums: List<Album>) {
        val api = getClient(user)
        val userId = user.id.asLong()
        val playlistData = db.getUserPlaylistData(userId)
        val playlist = getPlaylist(api, playlistData, userId)
        val playables = albums.flatMap { it.tracks.toList() }.mapNotNull { it?.uri?.uri?.toPlayableUri() }.toTypedArray()

        api.playlists.addPlayablesToClientPlaylist(playlist.id, *playables)
        playlist.externalUrls.spotify?.let { user.getDmChannelOrNull()?.createMessage(it) }
        api.shutdown()
    }

    private suspend fun getClient(user: User): SpotifyClientApi {
        val userId = user.id.asLong()
        val token = refreshSpotifyClientToken(config.spotifyClientId, config.spotifySecret, db.getUserRefreshToken(userId), false)
        val api = spotifyClientApi(
            clientId = config.spotifyClientId,
            clientSecret = config.spotifySecret,
            redirectUri = config.redirectUrl,
            authorization = SpotifyUserAuthorization(token = token)
        ){
            afterTokenRefresh = {
                it.token.refreshToken?.let { it1 -> db.updateUserRefreshToken(userId, it1) }
            }
        }.build()
        return api
    }

    private suspend fun getPlaylist(api: SpotifyClientApi, data: String?, userId: Long): Playlist {
        if(data == null) {
            return createNewPlaylist(api, userId)
        }

        val arr = data.split(";")

        if(arr.size != 2) {
            return createNewPlaylist(api, userId)
        }

        val date = arr[0]
        val id = arr[1]

        when(duration) {
            PlaylistDuration.NEVER -> {
                val playlist = api.playlists.getClientPlaylist(id)

                if(playlist == null) { // deleted or something, recreate
                    return createNewPlaylist(api, userId)
                } else {
                    if(!append) { // if we dont append, clear first
                        api.playlists.removeAllClientPlaylistPlayables(id)
                    }

                    return playlist.toFullPlaylist(Market.WS)!!
                }
            }

            else -> {
                if(date == duration.getTitleToday()) {
                    val playlist = api.playlists.getClientPlaylist(id)

                    if (playlist != null) {
                        return playlist.toFullPlaylist(Market.WS)!!
                    }
                }

                return createNewPlaylist(api, userId)
            }
        }
    }

    private suspend fun createNewPlaylist(api: SpotifyClientApi, userId: Long): Playlist {
        val playlist = api.playlists.createClientPlaylist(duration.getDefaultPlaylistName(), description = "Automatically generated by Release Radar discord bot", public = public, user = api.getUserId())
        db.setUserPlaylistData(userId, "${duration.getTitleToday()};${playlist.id}")
        return playlist
    }
}