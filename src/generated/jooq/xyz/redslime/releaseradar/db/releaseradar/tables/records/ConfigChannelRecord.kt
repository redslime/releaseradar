/*
 * This file is generated by jOOQ.
 */
package xyz.redslime.releaseradar.db.releaseradar.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl

import xyz.redslime.releaseradar.db.releaseradar.tables.ConfigChannel


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ConfigChannelRecord() : UpdatableRecordImpl<ConfigChannelRecord>(ConfigChannel.CONFIG_CHANNEL), Record2<Long?, Long?> {

    open var serverId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var channelId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    public override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    public override fun fieldsRow(): Row2<Long?, Long?> = super.fieldsRow() as Row2<Long?, Long?>
    public override fun valuesRow(): Row2<Long?, Long?> = super.valuesRow() as Row2<Long?, Long?>
    public override fun field1(): Field<Long?> = ConfigChannel.CONFIG_CHANNEL.SERVER_ID
    public override fun field2(): Field<Long?> = ConfigChannel.CONFIG_CHANNEL.CHANNEL_ID
    public override fun component1(): Long? = serverId
    public override fun component2(): Long? = channelId
    public override fun value1(): Long? = serverId
    public override fun value2(): Long? = channelId

    public override fun value1(value: Long?): ConfigChannelRecord {
        set(0, value)
        return this
    }

    public override fun value2(value: Long?): ConfigChannelRecord {
        set(1, value)
        return this
    }

    public override fun values(value1: Long?, value2: Long?): ConfigChannelRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised ConfigChannelRecord
     */
    constructor(serverId: Long? = null, channelId: Long? = null): this() {
        this.serverId = serverId
        this.channelId = channelId
        resetChangedOnNotNull()
    }
}
