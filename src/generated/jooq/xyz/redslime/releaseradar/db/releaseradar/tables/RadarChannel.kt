/*
 * This file is generated by jOOQ.
 */
package xyz.redslime.releaseradar.db.releaseradar.tables


import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import xyz.redslime.releaseradar.db.releaseradar.Releaseradar
import xyz.redslime.releaseradar.db.releaseradar.indexes.RADAR_CHANNEL_RADAR_CHANNEL_CHANNEL_ID_INDEX
import xyz.redslime.releaseradar.db.releaseradar.indexes.RADAR_CHANNEL_RADAR_CHANNEL_SERVER_ID_INDEX
import xyz.redslime.releaseradar.db.releaseradar.keys.ARTIST_RADAR_EXCLUDE_RADAR_CHANNEL_ID_FK
import xyz.redslime.releaseradar.db.releaseradar.keys.ARTIST_RADAR_RADAR_CHANNEL_ID_FK
import xyz.redslime.releaseradar.db.releaseradar.keys.KEY_RADAR_CHANNEL_PRIMARY
import xyz.redslime.releaseradar.db.releaseradar.keys.KEY_RADAR_CHANNEL_RADAR_CHANNEL_ID_UINDEX
import xyz.redslime.releaseradar.db.releaseradar.tables.Artist.ArtistPath
import xyz.redslime.releaseradar.db.releaseradar.tables.ArtistRadar.ArtistRadarPath
import xyz.redslime.releaseradar.db.releaseradar.tables.ArtistRadarExclude.ArtistRadarExcludePath
import xyz.redslime.releaseradar.db.releaseradar.tables.records.RadarChannelRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RadarChannel(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, RadarChannelRecord>?,
    parentPath: InverseForeignKey<out Record, RadarChannelRecord>?,
    aliased: Table<RadarChannelRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<RadarChannelRecord>(
    alias,
    Releaseradar.RELEASERADAR,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>releaseradar.radar_channel</code>
         */
        val RADAR_CHANNEL: RadarChannel = RadarChannel()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RadarChannelRecord> = RadarChannelRecord::class.java

    /**
     * The column <code>releaseradar.radar_channel.id</code>.
     */
    val ID: TableField<RadarChannelRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>releaseradar.radar_channel.server_id</code>.
     */
    val SERVER_ID: TableField<RadarChannelRecord, Long?> = createField(DSL.name("server_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>releaseradar.radar_channel.channel_id</code>.
     */
    val CHANNEL_ID: TableField<RadarChannelRecord, Long?> = createField(DSL.name("channel_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>releaseradar.radar_channel.timezone</code>.
     */
    val TIMEZONE: TableField<RadarChannelRecord, String?> = createField(DSL.name("timezone"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("ASAP", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>releaseradar.radar_channel.embed_type</code>.
     */
    val EMBED_TYPE: TableField<RadarChannelRecord, String?> = createField(DSL.name("embed_type"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("CUSTOM", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>releaseradar.radar_channel.emotes</code>.
     */
    val EMOTES: TableField<RadarChannelRecord, String?> = createField(DSL.name("emotes"), SQLDataType.VARCHAR(128), this, "")

    private constructor(alias: Name, aliased: Table<RadarChannelRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<RadarChannelRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<RadarChannelRecord>?, where: Condition): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>releaseradar.radar_channel</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>releaseradar.radar_channel</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>releaseradar.radar_channel</code> table reference
     */
    constructor(): this(DSL.name("radar_channel"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, RadarChannelRecord>?, parentPath: InverseForeignKey<out Record, RadarChannelRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, RADAR_CHANNEL, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class RadarChannelPath : RadarChannel, Path<RadarChannelRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, RadarChannelRecord>?, parentPath: InverseForeignKey<out Record, RadarChannelRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<RadarChannelRecord>): super(alias, aliased)
        override fun `as`(alias: String): RadarChannelPath = RadarChannelPath(DSL.name(alias), this)
        override fun `as`(alias: Name): RadarChannelPath = RadarChannelPath(alias, this)
        override fun `as`(alias: Table<*>): RadarChannelPath = RadarChannelPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Releaseradar.RELEASERADAR
    override fun getIndexes(): List<Index> = listOf(RADAR_CHANNEL_RADAR_CHANNEL_CHANNEL_ID_INDEX, RADAR_CHANNEL_RADAR_CHANNEL_SERVER_ID_INDEX)
    override fun getIdentity(): Identity<RadarChannelRecord, Int?> = super.getIdentity() as Identity<RadarChannelRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<RadarChannelRecord> = KEY_RADAR_CHANNEL_PRIMARY
    override fun getUniqueKeys(): List<UniqueKey<RadarChannelRecord>> = listOf(KEY_RADAR_CHANNEL_RADAR_CHANNEL_ID_UINDEX)

    private lateinit var _artistRadarExclude: ArtistRadarExcludePath

    /**
     * Get the implicit to-many join path to the
     * <code>releaseradar.artist_radar_exclude</code> table
     */
    fun artistRadarExclude(): ArtistRadarExcludePath {
        if (!this::_artistRadarExclude.isInitialized)
            _artistRadarExclude = ArtistRadarExcludePath(this, null, ARTIST_RADAR_EXCLUDE_RADAR_CHANNEL_ID_FK.inverseKey)

        return _artistRadarExclude;
    }

    val artistRadarExclude: ArtistRadarExcludePath
        get(): ArtistRadarExcludePath = artistRadarExclude()

    private lateinit var _artistRadar: ArtistRadarPath

    /**
     * Get the implicit to-many join path to the
     * <code>releaseradar.artist_radar</code> table
     */
    fun artistRadar(): ArtistRadarPath {
        if (!this::_artistRadar.isInitialized)
            _artistRadar = ArtistRadarPath(this, null, ARTIST_RADAR_RADAR_CHANNEL_ID_FK.inverseKey)

        return _artistRadar;
    }

    val artistRadar: ArtistRadarPath
        get(): ArtistRadarPath = artistRadar()

    /**
     * Get the implicit many-to-many join path to the
     * <code>releaseradar.artist</code> table, via the
     * <code>artist_radar_exclude_artist_id_fk</code> key
     */
    val artistRadarExcludeArtistIdFk: ArtistPath
        get(): ArtistPath = artistRadarExclude().artist()

    /**
     * Get the implicit many-to-many join path to the
     * <code>releaseradar.artist</code> table, via the
     * <code>artist_radar_artist_id_fk</code> key
     */
    val artistRadarArtistIdFk: ArtistPath
        get(): ArtistPath = artistRadar().artist()
    override fun `as`(alias: String): RadarChannel = RadarChannel(DSL.name(alias), this)
    override fun `as`(alias: Name): RadarChannel = RadarChannel(alias, this)
    override fun `as`(alias: Table<*>): RadarChannel = RadarChannel(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): RadarChannel = RadarChannel(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): RadarChannel = RadarChannel(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): RadarChannel = RadarChannel(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition): RadarChannel = RadarChannel(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): RadarChannel = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition): RadarChannel = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>): RadarChannel = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): RadarChannel = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): RadarChannel = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): RadarChannel = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): RadarChannel = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): RadarChannel = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): RadarChannel = where(DSL.notExists(select))
}
