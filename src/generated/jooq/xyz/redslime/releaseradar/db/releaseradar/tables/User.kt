/*
 * This file is generated by jOOQ.
 */
package xyz.redslime.releaseradar.db.releaseradar.tables


import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import xyz.redslime.releaseradar.db.releaseradar.Releaseradar
import xyz.redslime.releaseradar.db.releaseradar.keys.KEY_USER_PRIMARY
import xyz.redslime.releaseradar.db.releaseradar.keys.KEY_USER_USER_ID_UINDEX
import xyz.redslime.releaseradar.db.releaseradar.tables.records.UserRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class User(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UserRecord>?,
    aliased: Table<UserRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UserRecord>(
    alias,
    Releaseradar.RELEASERADAR,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>releaseradar.user</code>
         */
        val USER: User = User()
    }

    /**
     * The class holding records for this type
     */
    public override fun getRecordType(): Class<UserRecord> = UserRecord::class.java

    /**
     * The column <code>releaseradar.user.id</code>.
     */
    val ID: TableField<UserRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>releaseradar.user.timezone</code>.
     */
    val TIMEZONE: TableField<UserRecord, String?> = createField(DSL.name("timezone"), SQLDataType.VARCHAR(32), this, "")

    /**
     * The column <code>releaseradar.user.refresh_token</code>.
     */
    val REFRESH_TOKEN: TableField<UserRecord, String?> = createField(DSL.name("refresh_token"), SQLDataType.VARCHAR(256), this, "")

    /**
     * The column <code>releaseradar.user.playlist_type</code>.
     */
    val PLAYLIST_TYPE: TableField<UserRecord, String?> = createField(DSL.name("playlist_type"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>releaseradar.user.playlist_data</code>.
     */
    val PLAYLIST_DATA: TableField<UserRecord, String?> = createField(DSL.name("playlist_data"), SQLDataType.VARCHAR(256), this, "")

    /**
     * The column <code>releaseradar.user.enlisted</code>.
     */
    val ENLISTED: TableField<UserRecord, Boolean?> = createField(DSL.name("enlisted"), SQLDataType.BIT.nullable(false).defaultValue(DSL.inline("b'0'", SQLDataType.BIT)), this, "")

    /**
     * The column <code>releaseradar.user.skip_extended</code>.
     */
    val SKIP_EXTENDED: TableField<UserRecord, Boolean?> = createField(DSL.name("skip_extended"), SQLDataType.BIT.nullable(false).defaultValue(DSL.inline("b'0'", SQLDataType.BIT)), this, "")

    private constructor(alias: Name, aliased: Table<UserRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UserRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>releaseradar.user</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>releaseradar.user</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>releaseradar.user</code> table reference
     */
    constructor(): this(DSL.name("user"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UserRecord>): this(Internal.createPathAlias(child, key), child, key, USER, null)
    public override fun getSchema(): Schema? = if (aliased()) null else Releaseradar.RELEASERADAR
    public override fun getPrimaryKey(): UniqueKey<UserRecord> = KEY_USER_PRIMARY
    public override fun getUniqueKeys(): List<UniqueKey<UserRecord>> = listOf(KEY_USER_USER_ID_UINDEX)
    public override fun `as`(alias: String): User = User(DSL.name(alias), this)
    public override fun `as`(alias: Name): User = User(alias, this)
    public override fun `as`(alias: Table<*>): User = User(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    public override fun rename(name: String): User = User(DSL.name(name), null)

    /**
     * Rename this table
     */
    public override fun rename(name: Name): User = User(name, null)

    /**
     * Rename this table
     */
    public override fun rename(name: Table<*>): User = User(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    public override fun fieldsRow(): Row7<Long?, String?, String?, String?, String?, Boolean?, Boolean?> = super.fieldsRow() as Row7<Long?, String?, String?, String?, String?, Boolean?, Boolean?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, String?, String?, String?, String?, Boolean?, Boolean?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, String?, String?, String?, String?, Boolean?, Boolean?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
