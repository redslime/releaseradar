/*
 * This file is generated by jOOQ.
 */
package xyz.redslime.releaseradar.db.releaseradar.tables.records


import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl

import xyz.redslime.releaseradar.db.releaseradar.tables.User


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserRecord() : UpdatableRecordImpl<UserRecord>(User.USER) {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var timezone: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var refreshToken: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var playlistType: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var playlistData: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var enlisted: Boolean?
        set(value): Unit = set(5, value)
        get(): Boolean? = get(5) as Boolean?

    open var skipExtended: Boolean?
        set(value): Unit = set(6, value)
        get(): Boolean? = get(6) as Boolean?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised UserRecord
     */
    constructor(id: Long? = null, timezone: String? = null, refreshToken: String? = null, playlistType: String? = null, playlistData: String? = null, enlisted: Boolean? = null, skipExtended: Boolean? = null): this() {
        this.id = id
        this.timezone = timezone
        this.refreshToken = refreshToken
        this.playlistType = playlistType
        this.playlistData = playlistData
        this.enlisted = enlisted
        this.skipExtended = skipExtended
        resetChangedOnNotNull()
    }
}
