/*
 * This file is generated by jOOQ.
 */
package xyz.redslime.releaseradar.db.releaseradar.tables.records


import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record3
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl

import xyz.redslime.releaseradar.db.releaseradar.tables.UserStat


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserStatRecord() : UpdatableRecordImpl<UserStatRecord>(UserStat.USER_STAT), Record8<Long?, Long?, String?, Boolean?, Boolean?, Boolean?, Boolean?, LocalDateTime?> {

    open var userId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var serverId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var albumId: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var like: Boolean?
        set(value): Unit = set(3, value)
        get(): Boolean? = get(3) as Boolean?

    open var dislike: Boolean?
        set(value): Unit = set(4, value)
        get(): Boolean? = get(4) as Boolean?

    open var heart: Boolean?
        set(value): Unit = set(5, value)
        get(): Boolean? = get(5) as Boolean?

    open var clock: Boolean?
        set(value): Unit = set(6, value)
        get(): Boolean? = get(6) as Boolean?

    open var timestamp: LocalDateTime?
        set(value): Unit = set(7, value)
        get(): LocalDateTime? = get(7) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    public override fun key(): Record3<Long?, Long?, String?> = super.key() as Record3<Long?, Long?, String?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    public override fun fieldsRow(): Row8<Long?, Long?, String?, Boolean?, Boolean?, Boolean?, Boolean?, LocalDateTime?> = super.fieldsRow() as Row8<Long?, Long?, String?, Boolean?, Boolean?, Boolean?, Boolean?, LocalDateTime?>
    public override fun valuesRow(): Row8<Long?, Long?, String?, Boolean?, Boolean?, Boolean?, Boolean?, LocalDateTime?> = super.valuesRow() as Row8<Long?, Long?, String?, Boolean?, Boolean?, Boolean?, Boolean?, LocalDateTime?>
    public override fun field1(): Field<Long?> = UserStat.USER_STAT.USER_ID
    public override fun field2(): Field<Long?> = UserStat.USER_STAT.SERVER_ID
    public override fun field3(): Field<String?> = UserStat.USER_STAT.ALBUM_ID
    public override fun field4(): Field<Boolean?> = UserStat.USER_STAT.LIKE
    public override fun field5(): Field<Boolean?> = UserStat.USER_STAT.DISLIKE
    public override fun field6(): Field<Boolean?> = UserStat.USER_STAT.HEART
    public override fun field7(): Field<Boolean?> = UserStat.USER_STAT.CLOCK
    public override fun field8(): Field<LocalDateTime?> = UserStat.USER_STAT.TIMESTAMP
    public override fun component1(): Long? = userId
    public override fun component2(): Long? = serverId
    public override fun component3(): String? = albumId
    public override fun component4(): Boolean? = like
    public override fun component5(): Boolean? = dislike
    public override fun component6(): Boolean? = heart
    public override fun component7(): Boolean? = clock
    public override fun component8(): LocalDateTime? = timestamp
    public override fun value1(): Long? = userId
    public override fun value2(): Long? = serverId
    public override fun value3(): String? = albumId
    public override fun value4(): Boolean? = like
    public override fun value5(): Boolean? = dislike
    public override fun value6(): Boolean? = heart
    public override fun value7(): Boolean? = clock
    public override fun value8(): LocalDateTime? = timestamp

    public override fun value1(value: Long?): UserStatRecord {
        set(0, value)
        return this
    }

    public override fun value2(value: Long?): UserStatRecord {
        set(1, value)
        return this
    }

    public override fun value3(value: String?): UserStatRecord {
        set(2, value)
        return this
    }

    public override fun value4(value: Boolean?): UserStatRecord {
        set(3, value)
        return this
    }

    public override fun value5(value: Boolean?): UserStatRecord {
        set(4, value)
        return this
    }

    public override fun value6(value: Boolean?): UserStatRecord {
        set(5, value)
        return this
    }

    public override fun value7(value: Boolean?): UserStatRecord {
        set(6, value)
        return this
    }

    public override fun value8(value: LocalDateTime?): UserStatRecord {
        set(7, value)
        return this
    }

    public override fun values(value1: Long?, value2: Long?, value3: String?, value4: Boolean?, value5: Boolean?, value6: Boolean?, value7: Boolean?, value8: LocalDateTime?): UserStatRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised UserStatRecord
     */
    constructor(userId: Long? = null, serverId: Long? = null, albumId: String? = null, like: Boolean? = null, dislike: Boolean? = null, heart: Boolean? = null, clock: Boolean? = null, timestamp: LocalDateTime? = null): this() {
        this.userId = userId
        this.serverId = serverId
        this.albumId = albumId
        this.like = like
        this.dislike = dislike
        this.heart = heart
        this.clock = clock
        this.timestamp = timestamp
        resetChangedOnNotNull()
    }
}
