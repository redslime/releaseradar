/*
 * This file is generated by jOOQ.
 */
package xyz.redslime.releaseradar.db.releaseradar.tables.records


import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl

import xyz.redslime.releaseradar.db.releaseradar.tables.Artist


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ArtistRecord() : UpdatableRecordImpl<ArtistRecord>(Artist.ARTIST), Record3<String?, String?, LocalDateTime?> {

    open var id: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var lastRelease: LocalDateTime?
        set(value): Unit = set(2, value)
        get(): LocalDateTime? = get(2) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    public override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    public override fun fieldsRow(): Row3<String?, String?, LocalDateTime?> = super.fieldsRow() as Row3<String?, String?, LocalDateTime?>
    public override fun valuesRow(): Row3<String?, String?, LocalDateTime?> = super.valuesRow() as Row3<String?, String?, LocalDateTime?>
    public override fun field1(): Field<String?> = Artist.ARTIST.ID
    public override fun field2(): Field<String?> = Artist.ARTIST.NAME
    public override fun field3(): Field<LocalDateTime?> = Artist.ARTIST.LAST_RELEASE
    public override fun component1(): String? = id
    public override fun component2(): String? = name
    public override fun component3(): LocalDateTime? = lastRelease
    public override fun value1(): String? = id
    public override fun value2(): String? = name
    public override fun value3(): LocalDateTime? = lastRelease

    public override fun value1(value: String?): ArtistRecord {
        set(0, value)
        return this
    }

    public override fun value2(value: String?): ArtistRecord {
        set(1, value)
        return this
    }

    public override fun value3(value: LocalDateTime?): ArtistRecord {
        set(2, value)
        return this
    }

    public override fun values(value1: String?, value2: String?, value3: LocalDateTime?): ArtistRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised ArtistRecord
     */
    constructor(id: String? = null, name: String? = null, lastRelease: LocalDateTime? = null): this() {
        this.id = id
        this.name = name
        this.lastRelease = lastRelease
        resetChangedOnNotNull()
    }
}
