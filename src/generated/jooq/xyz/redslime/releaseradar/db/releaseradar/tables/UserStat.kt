/*
 * This file is generated by jOOQ.
 */
package xyz.redslime.releaseradar.db.releaseradar.tables


import java.time.LocalDateTime
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import xyz.redslime.releaseradar.db.releaseradar.Releaseradar
import xyz.redslime.releaseradar.db.releaseradar.indexes.USER_STAT_USER_STAT_USER_ID_INDEX
import xyz.redslime.releaseradar.db.releaseradar.indexes.USER_STAT_USER_STAT_USER_ID_SERVER_ID_INDEX
import xyz.redslime.releaseradar.db.releaseradar.indexes.USER_STAT_USER_STAT__INDEX
import xyz.redslime.releaseradar.db.releaseradar.keys.KEY_USER_STAT_PRIMARY
import xyz.redslime.releaseradar.db.releaseradar.tables.records.UserStatRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserStat(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UserStatRecord>?,
    aliased: Table<UserStatRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UserStatRecord>(
    alias,
    Releaseradar.RELEASERADAR,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>releaseradar.user_stat</code>
         */
        val USER_STAT: UserStat = UserStat()
    }

    /**
     * The class holding records for this type
     */
    public override fun getRecordType(): Class<UserStatRecord> = UserStatRecord::class.java

    /**
     * The column <code>releaseradar.user_stat.user_id</code>.
     */
    val USER_ID: TableField<UserStatRecord, Long?> = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>releaseradar.user_stat.server_id</code>.
     */
    val SERVER_ID: TableField<UserStatRecord, Long?> = createField(DSL.name("server_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>releaseradar.user_stat.album_id</code>.
     */
    val ALBUM_ID: TableField<UserStatRecord, String?> = createField(DSL.name("album_id"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>releaseradar.user_stat.like</code>.
     */
    val LIKE: TableField<UserStatRecord, Boolean?> = createField(DSL.name("like"), SQLDataType.BIT.nullable(false).defaultValue(DSL.inline("b'0'", SQLDataType.BIT)), this, "")

    /**
     * The column <code>releaseradar.user_stat.dislike</code>.
     */
    val DISLIKE: TableField<UserStatRecord, Boolean?> = createField(DSL.name("dislike"), SQLDataType.BIT.nullable(false).defaultValue(DSL.inline("b'0'", SQLDataType.BIT)), this, "")

    /**
     * The column <code>releaseradar.user_stat.heart</code>.
     */
    val HEART: TableField<UserStatRecord, Boolean?> = createField(DSL.name("heart"), SQLDataType.BIT.nullable(false).defaultValue(DSL.inline("b'0'", SQLDataType.BIT)), this, "")

    /**
     * The column <code>releaseradar.user_stat.clock</code>.
     */
    val CLOCK: TableField<UserStatRecord, Boolean?> = createField(DSL.name("clock"), SQLDataType.BIT.nullable(false).defaultValue(DSL.inline("b'0'", SQLDataType.BIT)), this, "")

    /**
     * The column <code>releaseradar.user_stat.timestamp</code>.
     */
    val TIMESTAMP: TableField<UserStatRecord, LocalDateTime?> = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<UserStatRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UserStatRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>releaseradar.user_stat</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>releaseradar.user_stat</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>releaseradar.user_stat</code> table reference
     */
    constructor(): this(DSL.name("user_stat"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UserStatRecord>): this(Internal.createPathAlias(child, key), child, key, USER_STAT, null)
    public override fun getSchema(): Schema? = if (aliased()) null else Releaseradar.RELEASERADAR
    public override fun getIndexes(): List<Index> = listOf(USER_STAT_USER_STAT__INDEX, USER_STAT_USER_STAT_USER_ID_INDEX, USER_STAT_USER_STAT_USER_ID_SERVER_ID_INDEX)
    public override fun getPrimaryKey(): UniqueKey<UserStatRecord> = KEY_USER_STAT_PRIMARY
    public override fun `as`(alias: String): UserStat = UserStat(DSL.name(alias), this)
    public override fun `as`(alias: Name): UserStat = UserStat(alias, this)
    public override fun `as`(alias: Table<*>): UserStat = UserStat(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    public override fun rename(name: String): UserStat = UserStat(DSL.name(name), null)

    /**
     * Rename this table
     */
    public override fun rename(name: Name): UserStat = UserStat(name, null)

    /**
     * Rename this table
     */
    public override fun rename(name: Table<*>): UserStat = UserStat(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    public override fun fieldsRow(): Row8<Long?, Long?, String?, Boolean?, Boolean?, Boolean?, Boolean?, LocalDateTime?> = super.fieldsRow() as Row8<Long?, Long?, String?, Boolean?, Boolean?, Boolean?, Boolean?, LocalDateTime?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?, String?, Boolean?, Boolean?, Boolean?, Boolean?, LocalDateTime?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?, String?, Boolean?, Boolean?, Boolean?, Boolean?, LocalDateTime?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
